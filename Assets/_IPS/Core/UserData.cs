using IPS.Core.Data;
using System.IO;
using UnityEngine;

namespace IPS {
    /// <summary>
    /// DO NOT EDIT THIS FILE! Create new one partial of this class if you want to write new code.
    /// </summary>
    public partial class UserData : SecureData {
        public static bool GDPRConsentRequested => HasKey("GDPR");

        public static bool GDPRConsentStatus {
            get => GetBool("GDPR", true);
            set => SetBool("GDPR", value);
        }

        #region Lifecycle data
        private static bool firstInstall = false;

        /// <summary> Return true for the first opened from install game </summary>
        public static bool FirstInstall {
            get {
                if (firstInstall) return true;

                if (!HasKey("FirstInstall")) {
                    firstInstall = true;
                    SetBool("FirstInstall", false);
                }
                return firstInstall;
            }
        }

        /// <summary> Return true for the first call triggered scince opened game icon, then always false for other replay, retry in the same session. </summary>
        public static bool FirstSession {
            get {
                if (!HasKey("FirstSession")) {
                    SetBool("FirstSession", false);
                    return true;
                }
                return false;
            }
        }

        /// <summary> Level NAME start = 1. (Maybe you need to use level - 1 for level index of array data) </summary>
        public static int CurrentLevel {
            get => GetInt("CurrentLevel", 1);
        }

        public static void IncreaseCurrentLevel() {
            SetInt("CurrentLevel", CurrentLevel + 1);
            Logs.Log("IncreaseCurrentLevel to: " + CurrentLevel);
        }

        /// <summary> Force set level for cheat only. In normal game, use 'IncreaseCurrentLevel' instead. </summary>
        /// <param name="levelName">Level NAME start = 1</param>
        public static void SetLevel(int levelName) { //use for cheat version
            SetInt("CurrentLevel", levelName);
        }

        /// <summary> Count for every start level trigger </summary>
        public static ulong PlayTimes {
            get => GetULong("PlayTimes", 0);
            private set => SetULong("PlayTimes", value);
        }

        public static void IncreasePlayTimes() {
            PlayTimes++;
        }

        public static bool IsCompletedTutorial {
            get => GetBool("CompletedTutorial", false);
            set => SetBool("CompletedTutorial", value);
        }
        #endregion lifecycle

        public static void DeleteAll() {
            PlayerPrefs.DeleteAll();
            try {
                if (Directory.Exists(Application.persistentDataPath)) {
                    Directory.Delete(Application.persistentDataPath, true);
                }
            }
            catch { throw; }
        }
    }
}
